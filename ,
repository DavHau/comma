#!/bin/bash
#
# usage example:
#   $ , yarn --help
# This finds a derivation providing a bin/yarn, and runs it with `nix run`.
# If there are multiple candidates, the user chooses one using `fzy`.
set -euo pipefail

if [[ $# -lt 1 ]]; then
  >&2 echo "usage: , <program> [arguments]"
  exit 1
fi

if [[ "$1" == "--install" ]] || [[ "$1" == "-i" ]]; then
  install=1
  shift
elif [[ "$1" == "--update" ]] || [[ "$1" == "-u" ]]; then
  ${UPDATE_SCRIPT}
  exit
else
  install=""
fi

# install nix index db
if [ ! -d "$HOME/.cache/nix-index" ]; then
  echo "installing default index DB to '$HOME/.cache/nix-index'"
  mkdir -p "$HOME/.cache/nix-index"
  cp -r "${NIX_INDEX_DB}" "$HOME/.cache/nix-index"
fi

argv0=$1; shift

case "${argv0}" in
  @OVERLAY_PACKAGES@)
    attr="${argv0}"
    ;;
  *)
    attr="$(nix-locate --db "${XDG_CACHE_HOME:-$HOME/.cache}/nix-index" --top-level --minimal --at-root --whole-name "/bin/${argv0}")"
    if [[ "$(echo "${attr}" | wc -l)" -ne 1 ]]; then
      attr="$(echo "${attr}" | fzy)"
    fi
    ;;
esac

if [[ -z $attr ]]; then
  >&2 echo "no match"
  exit 1
fi

# on flake based installations nixpkgs is specified via
# flake input and therefore NIX_PATH might be unset
if echo $NIX_PATH | grep -q "nixpkgs="; then
  nixArgs=""
else
  nixArgs="-I nixpkgs=${NIXPKGS}"
fi

if [[ -n $install ]]; then
  nix-env $nixArgs -iA "nixpkgs.${attr%%.*}"
else
  $NIX/bin/nix run $nixArgs "nixpkgs.${attr}" -c "${argv0}" "$@"
fi
